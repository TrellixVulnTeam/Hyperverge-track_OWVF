{"ast":null,"code":"import axios from 'axios';\nimport setAlert from './aleart';\nimport { SET_ALERT, REMOVE_ALERT, REGISTER_FAIL, REGISTER_SUCCESS } from '../action/'; // Ragister user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users/signup', body, config);\n    console.log(\"res\");\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(err);\n    const errors = err.response.data.err;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const login = (email, password) => async dispatch => {\n  console.log(\"sart login\");\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n\n  try {\n    const res = await axios.post('/api/auth/login', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.error;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_ERROR\n    });\n  }\n};","map":{"version":3,"sources":["/home/rani/Desktop/Red_bus_app/Frontend/my-app/src/action/auth.js"],"names":["axios","setAlert","SET_ALERT","REMOVE_ALERT","REGISTER_FAIL","REGISTER_SUCCESS","register","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","console","log","type","payload","data","loadUser","err","errors","response","forEach","error","msg","login","LOGIN_SUCCESS","LOGIN_ERROR"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,aAAlC,EAAiDC,gBAAjD,QAAyE,YAAzE,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMC,QAAN,IAAkB;AACrE,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AADE,GAAf;AAGA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AACA,MAAI;AACA,UAAMO,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAW,mBAAX,EAAgCJ,IAAhC,EAAsCF,MAAtC,CAAlB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAT,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEf,gBADD;AAELgB,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFR,KAAD,CAAR;AAKAZ,IAAAA,QAAQ,CAACa,QAAQ,EAAT,CAAR;AACH,GATD,CASE,OAAOC,GAAP,EAAY;AACVN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBE,GAAjC;;AACA,QAAIC,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIlB,QAAQ,CAACT,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDnB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEhB;AADD,KAAD,CAAR;AAGH;AACJ,CAxBM,C,CA0BP;;AACA,OAAO,MAAM0B,KAAK,GAAG,CAACtB,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAkB;AACxDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMR,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;;AACA,MAAI;AACA,UAAMG,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAW,iBAAX,EAA8BJ,IAA9B,CAAlB;AACAH,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEW,aADD;AAELV,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFR,KAAD,CAAR;AAKAZ,IAAAA,QAAQ,CAACa,QAAQ,EAAT,CAAR;AACH,GARD,CASA,OAAOC,GAAP,EAAY;AACR,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBM,KAAjC;;AACA,QAAIH,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIlB,QAAQ,CAACT,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDnB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEY;AADD,KAAD,CAAR;AAGH;AACJ,CA3BM","sourcesContent":["import axios from 'axios';\nimport setAlert from './aleart';\nimport { SET_ALERT, REMOVE_ALERT, REGISTER_FAIL, REGISTER_SUCCESS } from '../action/'\n\n// Ragister user\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const body = JSON.stringify({ name, email, password });\n    try {\n        const res = await axios.post('/api/users/signup', body, config);\n        console.log(\"res\")\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        console.log(err)\n        const errors = err.response.data.err;\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n}\n\n// login user\nexport const login = (email, password) => async dispatch => {\n    console.log(\"sart login\")\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password })\n    console.log(body)\n    try {\n        const res = await axios.post('/api/auth/login', body);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n\n        dispatch(loadUser())\n    }\n    catch (err) {\n        const errors = err.response.data.error\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: LOGIN_ERROR\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}