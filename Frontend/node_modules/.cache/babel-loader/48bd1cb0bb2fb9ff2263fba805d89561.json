{"ast":null,"code":"import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport Aleart from '../component/layout/Aleart';\nimport { BUSNOT_FOUND, BUS_FOUND } from './type'; // Search bus\n\nexport const searchbus = ({\n  from,\n  to,\n  date\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const start = from.split(\" \");\n  const End = to.split(\" \");\n  from = {\n    \"city\": start[0],\n    \"state\": start[1]\n  };\n  to = {\n    \"city\": start[0],\n    \"state\": start[1]\n  };\n  console.log(start, End);\n  const body = JSON.stringify({\n    fromto,\n    date\n  });\n  console.log(body);\n\n  try {\n    const res = await axios.post('http://localhost:1900/api/admins/admin/searchBus', body, config);\n    console.log(res);\n    dispatch({\n      type: BUS_FOUND,\n      payload: res.data\n    });\n    alert(\"Bus Found\");\n  } catch (err) {\n    const errors = err.response.data.err;\n\n    if (errors) {\n      alert(\"Not Found\");\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: BUSNOT_FOUND\n    });\n  }\n};","map":{"version":3,"sources":["/home/rani/Desktop/Red_bus_app/Frontend/my-app/src/action/buses.js"],"names":["axios","setAlert","setAuthToken","Aleart","BUSNOT_FOUND","BUS_FOUND","searchbus","from","to","date","dispatch","config","headers","start","split","End","console","log","body","JSON","stringify","fromto","res","post","type","payload","data","alert","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,QAAxC,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAOC,EAAAA,EAAP;AAAWC,EAAAA;AAAX,CAAD,KAAsB,MAAMC,QAAN,IAAgB;AAC3D,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AADE,GAAf;AAGA,QAAMC,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAW,GAAX,CAAd;AACA,QAAMC,GAAG,GAAGP,EAAE,CAACM,KAAH,CAAS,GAAT,CAAZ;AACAP,EAAAA,IAAI,GAAG;AAAE,YAAQM,KAAK,CAAC,CAAD,CAAf;AAAoB,aAAQA,KAAK,CAAC,CAAD;AAAjC,GAAP;AACAL,EAAAA,EAAE,GAAG;AAAE,YAAQK,KAAK,CAAC,CAAD,CAAf;AAAoB,aAASA,KAAK,CAAC,CAAD;AAAlC,GAAL;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAkBE,GAAlB;AACA,QAAMG,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,MAAF;AAAUZ,IAAAA;AAAV,GAAf,CAAb;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;;AACA,MAAI;AACA,UAAMI,GAAG,GAAG,MAAMtB,KAAK,CAACuB,IAAN,CAAW,kDAAX,EAA+DL,IAA/D,EAAqEP,MAArE,CAAlB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAZ,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAEnB,SADD;AAELoB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIAC,IAAAA,KAAK,CAAC,WAAD,CAAL;AACH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBE,GAAjC;;AACA,QAAIC,MAAJ,EAAY;AACRF,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAE,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAItB,QAAQ,CAACT,QAAQ,CAAC+B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDvB,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAEpB;AADD,KAAD,CAAR;AAGH;AACJ,CA/BM","sourcesContent":["import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport Aleart from '../component/layout/Aleart';\nimport { BUSNOT_FOUND, BUS_FOUND } from './type';\n\n// Search bus\nexport const searchbus = ({ from,to, date}) => async dispatch=>{\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const start = from.split(\" \")\n    const End = to.split(\" \")\n    from = { \"city\": start[0], \"state\":start[1]}\n    to = { \"city\": start[0], \"state\": start[1] }\n    \n    console.log(start,End)\n    const body = JSON.stringify({ fromto, date });\n\n    console.log(body)\n    try {\n        const res = await axios.post('http://localhost:1900/api/admins/admin/searchBus', body, config);\n        console.log(res)\n        dispatch({\n            type: BUS_FOUND,\n            payload: res.data\n        });\n        alert(\"Bus Found\")\n    } catch (err) {\n        const errors = err.response.data.err;\n        if (errors) {\n            alert(\"Not Found\")\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: BUSNOT_FOUND\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}