{"ast":null,"code":"import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport { BUSNOT_FOUND, BUS_FOUND } from './type';\nimport { loadUser } from './auth'; // Search bus\n\nexport const searchbus = ({\n  from,\n  to,\n  date\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const start = from.trim().split(',');\n  const End = to.trim().split(',');\n  from = {\n    \"city\": start[0],\n    \"state\": start[1]\n  };\n  to = {\n    \"city\": End[0],\n    \"state\": End[1]\n  };\n  console.log(to);\n  const data = {\n    \"from\": {\n      \"city\": start[0],\n      \"state\": start[1]\n    },\n    \"to\": {\n      \"city\": End[0],\n      \"state\": End[1]\n    },\n    date\n  };\n  const body = JSON.stringify(data);\n  console.log(body);\n\n  try {\n    const res = await axios.post('http://localhost:1900/api/buses/searchbus', body, config);\n\n    if (res.data.length == 0) {\n      dispatch({\n        type: BUSNOT_FOUND,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: BUS_FOUND,\n        payload: res.data\n      });\n    }\n\n    console.log({\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.err;\n\n    if (errors) {\n      alert(\"Not Found\");\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: BUSNOT_FOUND\n    });\n  }\n};","map":{"version":3,"sources":["/home/rani/Desktop/Red_bus_app/Frontend/my-app/src/action/SearchBuses.js"],"names":["axios","setAlert","setAuthToken","BUSNOT_FOUND","BUS_FOUND","loadUser","searchbus","from","to","date","dispatch","config","headers","start","trim","split","End","console","log","data","body","JSON","stringify","res","post","length","type","payload","err","errors","response","alert","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,QAAxC;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,EAAR;AAAYC,EAAAA;AAAZ,CAAD,KAAwB,MAAMC,QAAN,IAAkB;AAC/D,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AADE,GAAf;AAGA,QAAMC,KAAK,GAAGN,IAAI,CAACO,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAAd;AACA,QAAMC,GAAG,GAAGR,EAAE,CAACM,IAAH,GAAUC,KAAV,CAAgB,GAAhB,CAAZ;AAEAR,EAAAA,IAAI,GAAG;AAAE,YAAQM,KAAK,CAAC,CAAD,CAAf;AAAoB,aAASA,KAAK,CAAC,CAAD;AAAlC,GAAP;AACAL,EAAAA,EAAE,GAAG;AAAE,YAAQQ,GAAG,CAAC,CAAD,CAAb;AAAkB,aAASA,GAAG,CAAC,CAAD;AAA9B,GAAL;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,EAAZ;AAEA,QAAMW,IAAI,GAAG;AACT,YAAQ;AACJ,cAAQN,KAAK,CAAC,CAAD,CADT;AAEJ,eAASA,KAAK,CAAC,CAAD;AAFV,KADC;AAKT,UAAM;AACF,cAAQG,GAAG,CAAC,CAAD,CADT;AAEF,eAASA,GAAG,CAAC,CAAD;AAFV,KALG;AASTP,IAAAA;AATS,GAAb;AAWA,QAAMW,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAb;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;;AACA,MAAI;AACA,UAAMG,GAAG,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CAAW,2CAAX,EAAwDJ,IAAxD,EAA8DT,MAA9D,CAAlB;;AACA,QAAIY,GAAG,CAACJ,IAAJ,CAASM,MAAT,IAAmB,CAAvB,EAA0B;AACtBf,MAAAA,QAAQ,CAAC;AACLgB,QAAAA,IAAI,EAAEvB,YADD;AAELwB,QAAAA,OAAO,EAAEJ,GAAG,CAACJ;AAFR,OAAD,CAAR;AAIH,KALD,MAMK;AACDT,MAAAA,QAAQ,CAAC;AACLgB,QAAAA,IAAI,EAAEtB,SADD;AAELuB,QAAAA,OAAO,EAAEJ,GAAG,CAACJ;AAFR,OAAD,CAAR;AAIH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAES,MAAAA,OAAO,EAAEJ,GAAG,CAACJ;AAAf,KAAZ;AAEH,GAhBD,CAgBE,OAAOS,GAAP,EAAY;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaX,IAAb,CAAkBS,GAAjC;;AACA,QAAIC,MAAJ,EAAY;AACRE,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAIvB,QAAQ,CAACT,QAAQ,CAACgC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDxB,IAAAA,QAAQ,CAAC;AACLgB,MAAAA,IAAI,EAAEvB;AADD,KAAD,CAAR;AAGH;AACJ,CAlDM","sourcesContent":["import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport { BUSNOT_FOUND, BUS_FOUND } from './type';\nimport { loadUser } from './auth'; \n\n// Search bus\nexport const searchbus = ({ from, to, date }) => async dispatch => {\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const start = from.trim().split(',')\n    const End = to.trim().split(',')\n\n    from = { \"city\": start[0], \"state\": start[1] }\n    to = { \"city\": End[0], \"state\": End[1] }\n    console.log(to)\n\n    const data = {\n        \"from\": {\n            \"city\": start[0],\n            \"state\": start[1]\n        },\n        \"to\": {\n            \"city\": End[0],\n            \"state\": End[1]\n        },\n        date\n    }\n    const body = JSON.stringify(data)\n    console.log(body)\n    try {\n        const res = await axios.post('http://localhost:1900/api/buses/searchbus', body, config);\n        if (res.data.length == 0) {\n            dispatch({\n                type: BUSNOT_FOUND,\n                payload: res.data\n            })\n        }\n        else {\n            dispatch({\n                type: BUS_FOUND,\n                payload: res.data\n            })\n        }\n        console.log({ payload: res.data })\n        \n    } catch (err) {\n        const errors = err.response.data.err;\n        if (errors) {\n            alert(\"Not Found\")\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: BUSNOT_FOUND\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}